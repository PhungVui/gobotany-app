#!/usr/bin/env python
"""Run the right commands to build the Go Botany database from scratch."""

import sys
import subprocess

# Actions that the user can perform; default is to do them all.

def schema():
    admin('syncdb --noinput')
    admin('migrate')

def csv():
    run('python -m gobotany.core.importer zipimport')

def images():
    run('./bin/import-images.sh')

def dkey():
    run('./bin/import-dkey.sh')

def solr():
    admin('rebuild_index --noinput')

def test():
    run('./bin/test.sh')

ACTIONS = schema, csv, images, dkey, solr, test

# Helpers.

def admin(cmd):
    run('django-admin.py {} --settings gobotany.settings'.format(cmd))

def run(cmdline):
    print
    print 'Command line:', cmdline
    print
    arguments = cmdline.split()
    try:
        subprocess.check_call(arguments)
    except OSError as e:
        print >>sys.stderr, (
            'Fatal error running command\n    Command: {}\n    Error: {}'
            .format(cmdline, e))
        sys.exit(1)

# Main.

def main():
    args = sys.argv[1:]

    if not args:
        actions = ACTIONS
    else:
        actions = [action for action in ACTIONS if action.__name__ in args]

    if len(args) and len(args) != len(actions):
        print >>sys.stderr, (
            'Error: command-line arguments must be actions from the'
            ' following list\n\n    {}\n'
            .format(' '.join(action.__name__ for action in ACTIONS))
            )
        sys.exit(2)
    print
    print 'Actions: {}'.format(' '.join(action.__name__ for action in actions))
    print
    for action in actions:
        print '==== Running {} ===='.format(action.__name__)
        print
        action()
        print
    print 'Done'
    print

if __name__ == '__main__':
    main()
